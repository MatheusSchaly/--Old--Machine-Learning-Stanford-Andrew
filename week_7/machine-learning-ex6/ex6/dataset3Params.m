function [C, sigma] = dataset3Params(X, y, Xval, yval)
%DATASET3PARAMS returns your choice of C and sigma for Part 3 of the exercise
%where you select the optimal (C, sigma) learning parameters to use for SVM
%with RBF kernel
%   [C, sigma] = DATASET3PARAMS(X, y, Xval, yval) returns your choice of C and 
%   sigma. You should complete this function to return the optimal C and 
%   sigma based on a cross-validation set.
%

% You need to return the following variables correctly.
C = 1;
sigma = 0.3;

% ====================== YOUR CODE HERE ======================
% Instructions: Fill in this function to return the optimal C and sigma
%               learning parameters found using the cross validation set.
%               You can use svmPredict to predict the labels on the cross
%               validation set. For example, 
%                   predictions = svmPredict(model, Xval);
%               will return the predictions on the cross validation set.
%
%  Note: You can compute the prediction error using 
%        mean(double(predictions ~= yval))
%

# while (i <= 30)
#   C = [C i]
#   i = i * 3
# end

C_values = [0.01 0.03 0.1 0.3 1 3 10 30];
sigma_values = [0.01 0.03 0.1 0.3 1 3 10 30];
lowest_error = 1;

for i = 1:length(C_values)
  for j = 1:length(sigma_values)
    # train (generate) a model using different C and sigma values, using the Gaussian Kernel
    model = svmTrain(X, y, C_values(i), @(x1, x2) gaussianKernel(x1, x2, sigma_values(j)));
    # make predictions based on cross validation examples, generate a vector where 1 represent
    # "classified as belonging to 1 class", and 0 "classified as belonging to 0 class".
    predictions = svmPredict(model, Xval);
    # generate a vector of ones and zeros (predictions ~= yval) where 1 represent that your
    # prediction is different from ground truth, i.e. it was a misclassification. Then transform
    # it in a double, then take the mean of the vector, i.e. if your the vector generated by
    # (prediction ~= yval) is completely missclassified, it will be entirely composed of ones
    # results in m/m = 1 (100% error), otherwise, if you correctly classified every example then
    # your vector would be entirely composed of zeros, therefore 0/m = 0 (0% error). Right?
    error = mean(double(predictions ~= yval)); # remove semicolon to check the progress
    # C uncomment to check the progress
    # sigma uncomment to check the progress
    if error < lowest_error
      lowest_error = error;
      C = C_values(i);
      sigma = sigma_values(j);
    end
  end
end
   
% =========================================================================

end
